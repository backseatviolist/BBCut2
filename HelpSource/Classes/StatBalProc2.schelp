class:: StatBalProc2
summary:: Automatic breakbeat cutting algorithm using statistical feedback
categories:: Libraries>BBCut>Cut procedures
related:: Overviews/BBCut, Classes/StatBalProc

description::

Extension of ChooseCutProc using Charles Ames' method of statistical feedback
to control state selection. The essential auxilliary class is StatBalNormStream.
This version changes weightings during the phrase itself so as to give changing structure to phrasing.
Because weights may temporarily go to zero, the normalisation version of statistical feedback is essential.
See StatBalProc for comparison.

The technique of changing weightings is more noticeable than the influence of statistical feedback.
See the examples below for a comparison. Set heterogeneity high to simulate Lehmer style
dispersion characteristics.

For additional data on the algorithm see Nick Collins, "Further Automatic BreakBeat Cutting Methods", Proceedings of Generative Art 2001, reproduced at http://www.cus.cam.ac.uk/~nc272/.

classmethods::

method:: new

argument:: cutarray
An array of 3 arrays of form [ [states], [startweights], [endweights ] ] where the states
are the possible cutsizes, and the start weights are those for the beginning of the phrase, the
endweights for the end. Linear interpolation is use internally to work out intermediate weights.
The endweights are reached at beat position currphraselength=rollallowed.
The three arrays must obviously be of the same size.
argument:: repeatarray
As cutarray for the repeats parameter.
argument:: chet
heterogeneity for the StatBalNormStream that will be created from the cutarray.
argument:: rhet
heterogeneity for the StatBalNormStream that will be created from the cutarray.
argument:: phraselength
Next length of phrase in beats.
argument:: rollchance
A probability of a roll near the end of a phrase.
argument:: rollallowed
number of beats within sight of the end of the current phrase within which a roll is permissible.
Further, position at which final weightings for a phrase will be acheived.
argument:: bpsd
beats per sub division. Sets a primitive cut size resolution for choose offset messages.

examples::

You should substitute your own break sample to hear the effects of this cut procedure more clearly.

code::

b = BBCutBuffer(Platform.resourceDir +/+ "sound/break.aiff", 8);

//defaults
BBCut2(CutBuf3(b),StatBalProc2()).play;


(   //defaults
BBCut2(CutBuf3(b),StatBalProc2(
    [[0.25,0.5,1.0,1.5],[0.0,0.0,0.8,0.2],[0.5,0.3,0.2,0.0]],
    [[1,2,3],[0.1,0.5,0.4],[0.7,0.3,0.0]],
    phraselength: 32.0,
    rollallowed: 4.0
)).play;
)


(//compare to ChooseCutProc with changing weights- above (Ames) is more rigid, below (Lehmer) more randomly dispersed
//can write further class ChangeWeightCutProc to do this properly- for now, hack below is sufficient to test
BBCut2(CutBuf3(b),
    ChooseCutProc(
        {arg pos,currlength;
            //reduce effective currlength so reach weights end sooner (at point rolls become permissible)
            currlength= currlength-4.0;

            [0.25,0.5,1.0,1.5].wchoose([0.0,0.0,0.8,0.2].blend([0.5,0.3,0.2,0.0],(pos/currlength)));
        },
        {//repeats
            arg cutsize,pos,currlength;
            //reduce effective currlength so reach weights end sooner (at point rolls become permissible)
            currlength= currlength-4.0;

            [1,2,3].wchoose([0.1,0.5,0.4].blend([0.7,0.3,0.0],(pos/currlength)));
        },
        nil,32.0,0.0,4.0
    )
).play;

)

::